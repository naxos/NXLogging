<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/NXLogger.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/NXLogger</TokenIdentifier>
			<Abstract type="html">A logger can be used to log messages at a certain log level to log targets.
Normally you would use one of the static initializers to create a new logger
or to get the instance of a formerly created logger.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
            
			
			<NodeRef refid="14"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/setTargets:</TokenIdentifier>
			<Abstract type="html">The log targets of the logger. If a logger was freshly created by
one of the static initializers, this array will contain the singleton
instances of NXSystemLogTarget and NXConsoleLogTarget.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;id&lt;NXLogTarget&gt; &gt; *targets</Declaration>
			
			
			<Anchor>//api/name/targets</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/targets</TokenIdentifier>
			<Abstract type="html">The log targets of the logger. If a logger was freshly created by
one of the static initializers, this array will contain the singleton
instances of NXSystemLogTarget and NXConsoleLogTarget.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;id&lt;NXLogTarget&gt; &gt; *targets</Declaration>
			
			
			<Anchor>//api/name/targets</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NXLogger/targets</TokenIdentifier>
			<Abstract type="html">The log targets of the logger. If a logger was freshly created by
one of the static initializers, this array will contain the singleton
instances of NXSystemLogTarget and NXConsoleLogTarget.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray&lt;id&lt;NXLogTarget&gt; &gt; *targets</Declaration>
			
			
			<Anchor>//api/name/targets</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/setName:</TokenIdentifier>
			<Abstract type="html">The name of the logger</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/name</TokenIdentifier>
			<Abstract type="html">The name of the logger</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NXLogger/name</TokenIdentifier>
			<Abstract type="html">The name of the logger</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NXLogger/applicationLogger</TokenIdentifier>
			<Abstract type="html">Looks up the logger with the bundleIdentifier of your app as a name.
Creates and registers the logger if it does not yet exist. By default the logger
will log to the singleton instances of NXSystemLogTarget and NXConsoleLogTarget.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>+ (instancetype)applicationLogger</Declaration>
			
			<ReturnValue><Abstract type="html">The logger instance</Abstract></ReturnValue>
			<Anchor>//api/name/applicationLogger</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NXLogger/loggerNamed:</TokenIdentifier>
			<Abstract type="html">Looks up the logger with the given name.
Creates and registers the logger if it does not yet exist. By default the logger
will log to the singleton instances of NXSystemLogTarget and NXConsoleLogTarget.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>+ (instancetype)loggerNamed:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">(input) The name of the logger</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The logger instance</Abstract></ReturnValue>
			<Anchor>//api/name/loggerNamed:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NXLogger/registerLogger:</TokenIdentifier>
			<Abstract type="html">Register a logger for later usage. The logger will be registered under
its name property. A logger registered under the same name will be
overwritten. If the logger was created by one of the static initializers
the logger will already be registered.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>+ (void)registerLogger:(NXLogger *)logger</Declaration>
			<Parameters>
				<Parameter>
					<Name>logger</Name>
					<Abstract type="html">(input) The logger to register</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerLogger:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/initWithName:target:</TokenIdentifier>
			<Abstract type="html">Creates a custom logger with a name and a log target.
If at a later point, you want to look up this logger with the
static loggerNamed method, you need to register the logger
instance with the NXLogRegistry.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithName:(NSString *)name target:(id&lt;NXLogTarget&gt;)target</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">(input) The name for the logger</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">(input) The initial log target for the logger</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The logger instance</Abstract></ReturnValue>
			<Anchor>//api/name/initWithName:target:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/addLogTarget:</TokenIdentifier>
			<Abstract type="html">Adds a target to the logger. Each log target will be
logged to individually according to its maxLogLevel property.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)addLogTarget:(id&lt;NXLogTarget&gt;)target</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">(input) The log target to be added to the logger</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addLogTarget:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/removeLogTarget:</TokenIdentifier>
			<Abstract type="html">Remove a target from the logger.</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)removeLogTarget:(id&lt;NXLogTarget&gt;)target</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">(input) The log target to be removed from the logger</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeLogTarget:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/log:info:format:</TokenIdentifier>
			<Abstract type="html">Log a message and info with the given log level to the logger&apos;s targets</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)log:(NXLogLevel)level info:(NSDictionary *)info format:(NSString *)format, ...</Declaration>
			<Parameters>
				<Parameter>
					<Name>level</Name>
					<Abstract type="html">(input) The log level</Abstract>
				</Parameter><Parameter>
					<Name>info</Name>
					<Abstract type="html">(input) An info dictionary. Use the macro NXLOGINFO or pass a dictionary with values for the keys @(NXLogInfoFile), @(NXLogInfoFunction), and @(NXLogInfoLine).</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">(input) The message format (can be nil). See [NSString stringWithFormat:] for more info.</Abstract>
				</Parameter><Parameter>
					<Name>...</Name>
					<Abstract type="html">A comma-separated list of arguments to substitute into format.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:info:format:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/log:info:error:</TokenIdentifier>
			<Abstract type="html">Log info and an error with the given log level to the logger&apos;s targets</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)log:(NXLogLevel)level info:(NSDictionary *)info error:(NSError *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>level</Name>
					<Abstract type="html">(input) The log level</Abstract>
				</Parameter><Parameter>
					<Name>info</Name>
					<Abstract type="html">(input) An info dictionary. Use the macro NXLOGINFO or pass a dictionary with values for the keys @(NXLogInfoFile), @(NXLogInfoFunction), and @(NXLogInfoLine).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">(input) The error whose trace (see NSError+NXLogging) will be logged.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:info:error:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/log:info:error:format:</TokenIdentifier>
			<Abstract type="html">Log info, a message and an error with the given log level to the logger&apos;s targets</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)log:(NXLogLevel)level info:(NSDictionary *)info error:(NSError *)error format:(NSString *)format, ...</Declaration>
			<Parameters>
				<Parameter>
					<Name>level</Name>
					<Abstract type="html">(input) The log level</Abstract>
				</Parameter><Parameter>
					<Name>info</Name>
					<Abstract type="html">(input) An info dictionary. Use the macro NXLOGINFO or pass a dictionary with values for the keys @(NXLogInfoFile), @(NXLogInfoFunction), and @(NXLogInfoLine).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">(input) The error whose trace will be logged.</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">(input) The message format (can be nil). See [NSString stringWithFormat:] for more info.</Abstract>
				</Parameter><Parameter>
					<Name>...</Name>
					<Abstract type="html">A comma-separated list of arguments to substitute into format.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:info:error:format:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/log:info:exception:</TokenIdentifier>
			<Abstract type="html">Log info and an error with the given log level to the logger&apos;s targets</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)log:(NXLogLevel)level info:(NSDictionary *)info exception:(NSException *)exception</Declaration>
			<Parameters>
				<Parameter>
					<Name>level</Name>
					<Abstract type="html">(input) The log level</Abstract>
				</Parameter><Parameter>
					<Name>info</Name>
					<Abstract type="html">(input) An info dictionary. Use the macro NXLOGINFO or pass a dictionary with values for the keys @(NXLogInfoFile), @(NXLogInfoFunction), and @(NXLogInfoLine).</Abstract>
				</Parameter><Parameter>
					<Name>exception</Name>
					<Abstract type="html">(input) The exception whose trace (see NSException+NXLogging) will be logged.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:info:exception:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/log:info:exception:format:</TokenIdentifier>
			<Abstract type="html">Log info, a message and an error with the given log level to the logger&apos;s targets</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)log:(NXLogLevel)level info:(NSDictionary *)info exception:(NSException *)exception format:(NSString *)format, ...</Declaration>
			<Parameters>
				<Parameter>
					<Name>level</Name>
					<Abstract type="html">(input) The log level</Abstract>
				</Parameter><Parameter>
					<Name>info</Name>
					<Abstract type="html">(input) An info dictionary. Use the macro NXLOGINFO or pass a dictionary with values for the keys @(NXLogInfoFile), @(NXLogInfoFunction), and @(NXLogInfoLine).</Abstract>
				</Parameter><Parameter>
					<Name>exception</Name>
					<Abstract type="html">(input) The exception whose trace (see NSException+NXLogging) will be logged.</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">(input) The message format (can be nil). See [NSString stringWithFormat:] for more info.</Abstract>
				</Parameter><Parameter>
					<Name>...</Name>
					<Abstract type="html">A comma-separated list of arguments to substitute into format.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:info:exception:format:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXLogger/log:info:error:exception:format:arguments:</TokenIdentifier>
			<Abstract type="html">Log info, a message and an error with the given log level to the logger&apos;s targets</Abstract>
			<DeclaredIn>NXLogger.h</DeclaredIn>
			
			<Declaration>- (void)log:(NXLogLevel)level info:(NSDictionary *)info error:(NSError *)error exception:(NSException *)exception format:(NSString *)format arguments:(va_list)arguments</Declaration>
			<Parameters>
				<Parameter>
					<Name>level</Name>
					<Abstract type="html">(input) The log level</Abstract>
				</Parameter><Parameter>
					<Name>info</Name>
					<Abstract type="html">(input) An info dictionary. Use the macro NXLOGINFO or pass a dictionary with values for the keys @(NXLogInfoFile), @(NXLogInfoFunction), and @(NXLogInfoLine).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">(input) The error whose trace will be logged.</Abstract>
				</Parameter><Parameter>
					<Name>exception</Name>
					<Abstract type="html">(input) The exception whose trace will be logged.</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">(input) The message format (can be nil). See [NSString initWithFormat:arguments:] for more info.</Abstract>
				</Parameter><Parameter>
					<Name>arguments</Name>
					<Abstract type="html">A list of arguments to substitute into format.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:info:error:exception:format:arguments:</Anchor>
            <NodeRef refid="14"/>
		</Token>
		
        
        
	</File>
</Tokens>