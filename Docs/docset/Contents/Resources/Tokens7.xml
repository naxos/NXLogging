<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/NXConsoleLogTarget.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/NXConsoleLogTarget</TokenIdentifier>
			<Abstract type="html">A log target for output on standard error for debug purposes.
Since every logger created withe one of the static initializers
of the logger class uses the same instance of NXConsoleLogTarget,
you can adjust the level of log output of your application
with [NXConsoleLogTarget sharedInstance].maxLogLevel.
The default maximum log level for this target is NXLogLevelInfo.</Abstract>
			<DeclaredIn>NXConsoleLogTarget.h</DeclaredIn>
            
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXConsoleLogTarget/setColorsEnabled:</TokenIdentifier>
			<Abstract type="html">Set to YES to enable colors on the console output.
In the Xcode console you will need the assistance of the XcodeColors plugin.</Abstract>
			<DeclaredIn>NXConsoleLogTarget.h</DeclaredIn>
			
			<Declaration>@property (atomic) BOOL colorsEnabled</Declaration>
			
			
			<Anchor>//api/name/colorsEnabled</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXConsoleLogTarget/colorsEnabled</TokenIdentifier>
			<Abstract type="html">Set to YES to enable colors on the console output.
In the Xcode console you will need the assistance of the XcodeColors plugin.</Abstract>
			<DeclaredIn>NXConsoleLogTarget.h</DeclaredIn>
			
			<Declaration>@property (atomic) BOOL colorsEnabled</Declaration>
			
			
			<Anchor>//api/name/colorsEnabled</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NXConsoleLogTarget/colorsEnabled</TokenIdentifier>
			<Abstract type="html">Set to YES to enable colors on the console output.
In the Xcode console you will need the assistance of the XcodeColors plugin.</Abstract>
			<DeclaredIn>NXConsoleLogTarget.h</DeclaredIn>
			
			<Declaration>@property (atomic) BOOL colorsEnabled</Declaration>
			
			
			<Anchor>//api/name/colorsEnabled</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NXConsoleLogTarget/sharedInstance</TokenIdentifier>
			<Abstract type="html">Get the singleton instance of the console log target initialized
with the singleton instance of the NXDebugLogFormatter.</Abstract>
			<DeclaredIn>NXConsoleLogTarget.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">The instance</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXConsoleLogTarget/initWithFormatter:</TokenIdentifier>
			<Abstract type="html">The designated initializer</Abstract>
			<DeclaredIn>NXConsoleLogTarget.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithFormatter:(id&lt;NXLogFormatter&gt;)formatter</Declaration>
			<Parameters>
				<Parameter>
					<Name>formatter</Name>
					<Abstract type="html">The log formatter</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithFormatter:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NXConsoleLogTarget/log:message:</TokenIdentifier>
			<Abstract type="html">Log a message with a log level.</Abstract>
			<DeclaredIn>NXConsoleLogTarget.m</DeclaredIn>
			
			<Declaration>- (void)log:(NXLogLevel)level message:(id)message</Declaration>
			<Parameters>
				<Parameter>
					<Name>level</Name>
					<Abstract type="html">(input) The log level</Abstract>
				</Parameter><Parameter>
					<Name>message</Name>
					<Abstract type="html">(input) The log message</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:message:</Anchor>
            <NodeRef refid="7"/>
		</Token>
		
        
        
	</File>
</Tokens>